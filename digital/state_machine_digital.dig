<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>decoder_5_8</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>i1,i2,i3,i4,ck,msg:8</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;&#xd;
use ieee.std_logic_1164.all;&#xd;
&#xd;
entity decoder_5_8 is&#xd;
	port ( i1, i2, i3, i4, ck: in std_logic;&#xd;
           msg: in std_logic_vector(7 downto 0);&#xd;
	       o1, o2, o3, o4, mv, picked, err, pr: out std_logic);&#xd;
end entity decoder_5_8;&#xd;
&#xd;
architecture arc_decoder_5_8 of decoder_5_8 is&#xd;
    signal pr_state: std_logic:=&apos;0&apos;;&#xd;
    signal mv_state: std_logic:=&apos;0&apos;;&#xd;
    signal idle_state: std_logic:=&apos;0&apos;;&#xd;
    signal combined_state: std_logic_vector(2 downto 0) := &quot;000&quot;;&#xd;
    signal previous_i4: std_logic;&#xd;
begin&#xd;
    process(combined_state, i1, i2, i3, i4) is&#xd;
        variable combined_input: std_logic_vector(3 downto 0);&#xd;
    begin&#xd;
        o1 &lt;= &apos;0&apos;;&#xd;
        o2 &lt;= &apos;0&apos;;&#xd;
        o3 &lt;= &apos;0&apos;;&#xd;
        o4 &lt;= &apos;0&apos;;&#xd;
        pr &lt;= combined_state(0);&#xd;
        mv &lt;= combined_state(2);&#xd;
        picked &lt;= &apos;0&apos;;&#xd;
        err &lt;= &apos;0&apos;;&#xd;
        combined_input := i4 &amp; i3 &amp; i2 &amp; i1;&#xd;
        if combined_state(2) then -- Con&#xd;
            mv &lt;= &apos;0&apos;;&#xd;
            case combined_input is&#xd;
                when &quot;0001&quot; =&gt;&#xd;
                    o1 &lt;= &apos;1&apos;;&#xd;
                when &quot;0010&quot; =&gt;&#xd;
                    o2 &lt;= &apos;1&apos;;&#xd;
                when &quot;0100&quot; =&gt;&#xd;
                    o3 &lt;= &apos;1&apos;;&#xd;
                when &quot;1000&quot; =&gt;&#xd;
                    o4 &lt;= &apos;1&apos;;&#xd;
                when &quot;0000&quot; =&gt;&#xd;
                    mv &lt;= &apos;1&apos;;&#xd;
                when others =&gt;&#xd;
                    err &lt;= &apos;1&apos;;&#xd;
            end case;&#xd;
        elsif combined_state(0) = &apos;1&apos; and i4 = &apos;0&apos; and previous_i4 = &apos;1&apos; then -- Picked condition&#xd;
            picked &lt;= &apos;1&apos;;&#xd;
        elsif combined_state(1) or combined_state(2) then -- Idle should be interrupted when vial at first station&#xd;
            if (combined_input = &quot;0001&quot;) then&#xd;
                o1 &lt;= &apos;1&apos;;&#xd;
                pr &lt;= &apos;0&apos;;&#xd;
            end if;&#xd;
        end if;&#xd;
    end process;&#xd;
&#xd;
    process(msg) is  &#xd;
    begin&#xd;
        combined_state &lt;= &quot;000&quot;;&#xd;
        if (msg = &quot;10000000&quot;) then -- Process&#xd;
            combined_state &lt;= &quot;001&quot;;&#xd;
        elsif (msg = &quot;00000000&quot; or msg = &quot;00001001&quot;) then -- Idle&#xd;
            combined_state &lt;= &quot;010&quot;;&#xd;
        elsif (msg = &quot;00010000&quot;) then -- Move&#xd;
            combined_state &lt;= &quot;100&quot;;&#xd;
        end if;&#xd;
    end process;&#xd;
&#xd;
    process(ck) is&#xd;
    begin&#xd;
        if (ck&apos;event and ck = &apos;1&apos;) then&#xd;
            previous_i4 &lt;= i4;&#xd;
        end if;&#xd;
    end process;&#xd;
&#xd;
&#xd;
end arc_decoder_5_8;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>o1,o2,o3,o4,mv,picked,err,pr</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>4</int>
        </entry>
        <entry>
          <string>Code_File</string>
          <string>C:\Users\davol\embedded_system_design\digital\src\decoder.vhd</string>
        </entry>
      </elementAttributes>
      <pos x="420" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TOF2</string>
        </entry>
      </elementAttributes>
      <pos x="40" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TOF3</string>
        </entry>
      </elementAttributes>
      <pos x="40" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TOF4</string>
        </entry>
      </elementAttributes>
      <pos x="40" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="660" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>write_uart_sm</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>state_vector:8,clk</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;&#xd;
use ieee.std_logic_1164.all;&#xd;
&#xd;
entity write_uart_sm is&#xd;
	port ( state_vector: in std_logic_vector(7 downto 0);&#xd;&#xd;
           clk: in std_logic;&#xd;
	       data_write: out std_logic_vector(7 downto 0); &#xd;
           data_write_bool: out std_logic);&#xd;
end entity write_uart_sm;&#xd;
&#xd;
architecture arc_write_uart_sm of write_uart_sm is&#xd;
    signal state_changed: std_logic;&#xd;
    signal current_state: std_logic_vector(7 downto 0);&#xd;
begin&#xd;
    process(clk) is&#xd;
    begin&#xd;
        if (clk = &apos;1&apos; and clk&apos;event) then&#xd;
            data_write &lt;= state_vector;&#xd;
            if (state_vector /= current_state) then&#xd;
                state_changed &lt;= &apos;1&apos;;&#xd;
                current_state &lt;= state_vector;&#xd;
                data_write_bool &lt;= &apos;1&apos;;&#xd;
            else&#xd;
                data_write_bool &lt;= &apos;0&apos;;&#xd;
            end if;&#xd;
        end if;&#xd;
    end process;&#xd;
end arc_write_uart_sm;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>data_write:8,data_write_bool</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>12</int>
        </entry>
        <entry>
          <string>Code_File</string>
          <string>C:\Users\davol\embedded_system_design\digital\src\write_uart_state_machine.vhd</string>
        </entry>
      </elementAttributes>
      <pos x="760" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1,1,1,1,1,1,1</string>
        </entry>
      </elementAttributes>
      <pos x="680" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="720" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Frequency</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="-160" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>ComPort</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>COM6</string>
        </entry>
        <entry>
          <string>comPort</string>
          <string>COM6</string>
        </entry>
      </elementAttributes>
      <pos x="1120" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1120" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="1140" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes/>
      <pos x="1160" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TOF1</string>
        </entry>
      </elementAttributes>
      <pos x="40" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>tof_mimic</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>i1,i2,i3,i4,mv_msg:8</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;&#xd;
use ieee.std_logic_1164.all;&#xd;
&#xd;
entity tof_mimic is&#xd;
	port ( i1, i2, i3, i4: in std_logic;&#xd;
           mv_msg: in std_logic_vector(7 downto 0);&#xd;
	       tof1, tof2, tof3, tof4: out std_logic);&#xd;
end entity tof_mimic;&#xd;
&#xd;
architecture arc_tof_mimic of tof_mimic is&#xd;
    signal mv_counter: std_logic := &apos;0&apos;;&#xd;
    signal state_msg: std_logic_vector(7 downto 0) := &quot;00000000&quot;;&#xd;
begin&#xd;
    comb: process(mv_counter, i1, i2, i3, i4)&#xd;
    begin&#xd;
        tof1 &lt;= i1;&#xd;
        tof2 &lt;= i2;&#xd;
        tof3 &lt;= i3;&#xd;
        tof4 &lt;= i4;&#xd;
        if (mv_counter = &apos;1&apos;) then&#xd;
            tof1 &lt;= &apos;0&apos;;&#xd;
            tof2 &lt;= &apos;0&apos;;&#xd;
            tof3 &lt;= &apos;0&apos;;&#xd;
            tof4 &lt;= &apos;0&apos;;&#xd;
        end if;&#xd;
    end process;&#xd;
    &#xd;
    upd_msg: process(mv_msg)&#xd;
    begin&#xd;
        if mv_msg /= &quot;ZZZZZZZZ&quot; then&#xd;
            state_msg &lt;= mv_msg;&#xd;
        end if;&#xd;
    end process;&#xd;
&#xd;
    upd: process(state_msg, i1, i2, i3, i4)&#xd;
    begin&#xd;
        if (i1&apos;event and i1 = &apos;1&apos;) then&#xd;
            mv_counter &lt;= &apos;0&apos;;&#xd;
        elsif (i2&apos;event and i2 = &apos;1&apos;) then&#xd;
            mv_counter &lt;= &apos;0&apos;;&#xd;
        elsif (i3&apos;event and i3 = &apos;1&apos;) then&#xd;
            mv_counter &lt;= &apos;0&apos;;&#xd;
        elsif (i4&apos;event and i4 = &apos;1&apos;) then&#xd;
            mv_counter &lt;= &apos;0&apos;;&#xd;
        elsif (state_msg&apos;event) then&#xd;
            if state_msg = &quot;00010000&quot; then&#xd;
                mv_counter &lt;= &apos;1&apos;;&#xd;
            else    &#xd;
                mv_counter &lt;= &apos;0&apos;;&#xd;
            end if;&#xd;
        end if;&#xd;
    end process;&#xd;
end arc_tof_mimic;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>tof1,tof2,tof3,tof4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>7</int>
        </entry>
        <entry>
          <string>Code_File</string>
          <string>C:\Users\davol\embedded_system_design\digital\src\tof_sensors_mimic.vhd</string>
        </entry>
      </elementAttributes>
      <pos x="140" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>RegistroIncDec8bit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>D:8,Set,Inc,Dec,Clk,Reset</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
-- per dare un senso agli operatori +1 e -1:
use ieee.std_logic_unsigned.all; 


entity RegistroIncDec8bit is

	port 
	(
		Q : out  std_logic_vector(7 downto 0);
		D : in  std_logic_vector(7 downto 0);
		Set: in std_logic;
		Inc: in std_logic;
		Dec: in std_logic;
		Clk : in std_logic;
		Reset : in std_logic
	);

end RegistroIncDec8bit;
architecture behav of RegistroIncDec8bit is
signal currVal  :  std_logic_vector(7 downto 0);
signal nextVal :  std_logic_vector(7 downto 0);
signal IncDecSet :  std_logic_vector(2 downto 0); -- segnale ausiliario
begin

	process(clk)
	begin
		if (clk=&apos;1&apos; and clk&apos;event) then
			if (reset =&apos;1&apos;) then	
				currVal &lt;= (others =&gt;&apos;0&apos;);
			else
				currVal &lt;= nextVal;
			end if;
		end if;
	end process;
	
	-- selezione del prossimo valore interno
	IncDecSet &lt;= Inc &amp; Dec &amp; Set;
	with IncDecSet select
		nextVal &lt;= D		when &quot;001&quot;,
			   currVal + 1  when &quot;100&quot;,
			   currVal - 1  when &quot;010&quot;,
			   currVal		when others;  -- others assures combinatorial synthesis	
			   				  
	Q &lt;= currVal;

end behav;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Q:8</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="520" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Counter</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>Inc,Clk</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
-- per dare un senso agli operatori +1 e -1:
use ieee.std_logic_unsigned.all; 


entity Counter is

	port 
	(
		Q : out  std_logic_vector(7 downto 0);
		Inc: in std_logic;
		Clk : in std_logic
	);

end Counter;

architecture behav of Counter is
signal currVal  :  std_logic_vector(7 downto 0):=&quot;00000000&quot;;
signal nextVal :  std_logic_vector(7 downto 0);
signal previous_inc_val : std_logic:=&apos;0&apos;;
begin

	process(clk)
	begin
		if (clk=&apos;1&apos; and clk&apos;event) then
			if (Inc =&apos;1&apos; and Inc /= previous_inc_val) then	
				currVal &lt;= (currVal + 1);
			else
				currVal &lt;= currVal;
			end if;
			previous_inc_val &lt;= Inc;
		end if;
	end process;
					  
	Q &lt;= currVal;
			
end behav;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Q:8</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="820" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="980" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg-Hex</elementName>
      <elementAttributes/>
      <pos x="1080" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7-0</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>7-4,3-0</string>
        </entry>
      </elementAttributes>
      <pos x="960" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1140" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="620" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="580" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="540" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="560" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="600" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="640" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="460" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="680" y="420"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="120" y="320"/>
      <p2 x="140" y="320"/>
    </wire>
    <wire>
      <p1 x="40" y="320"/>
      <p2 x="80" y="320"/>
    </wire>
    <wire>
      <p1 x="500" y="320"/>
      <p2 x="620" y="320"/>
    </wire>
    <wire>
      <p1 x="360" y="320"/>
      <p2 x="420" y="320"/>
    </wire>
    <wire>
      <p1 x="620" y="320"/>
      <p2 x="680" y="320"/>
    </wire>
    <wire>
      <p1 x="480" y="0"/>
      <p2 x="520" y="0"/>
    </wire>
    <wire>
      <p1 x="800" y="480"/>
      <p2 x="820" y="480"/>
    </wire>
    <wire>
      <p1 x="980" y="480"/>
      <p2 x="1120" y="480"/>
    </wire>
    <wire>
      <p1 x="120" y="-100"/>
      <p2 x="660" y="-100"/>
    </wire>
    <wire>
      <p1 x="60" y="260"/>
      <p2 x="140" y="260"/>
    </wire>
    <wire>
      <p1 x="280" y="260"/>
      <p2 x="420" y="260"/>
    </wire>
    <wire>
      <p1 x="500" y="260"/>
      <p2 x="560" y="260"/>
    </wire>
    <wire>
      <p1 x="1000" y="260"/>
      <p2 x="1140" y="260"/>
    </wire>
    <wire>
      <p1 x="720" y="260"/>
      <p2 x="760" y="260"/>
    </wire>
    <wire>
      <p1 x="560" y="260"/>
      <p2 x="680" y="260"/>
    </wire>
    <wire>
      <p1 x="500" y="-40"/>
      <p2 x="520" y="-40"/>
    </wire>
    <wire>
      <p1 x="-160" y="520"/>
      <p2 x="-100" y="520"/>
    </wire>
    <wire>
      <p1 x="-100" y="520"/>
      <p2 x="360" y="520"/>
    </wire>
    <wire>
      <p1 x="360" y="520"/>
      <p2 x="720" y="520"/>
    </wire>
    <wire>
      <p1 x="720" y="520"/>
      <p2 x="800" y="520"/>
    </wire>
    <wire>
      <p1 x="800" y="520"/>
      <p2 x="1180" y="520"/>
    </wire>
    <wire>
      <p1 x="500" y="360"/>
      <p2 x="660" y="360"/>
    </wire>
    <wire>
      <p1 x="40" y="360"/>
      <p2 x="100" y="360"/>
    </wire>
    <wire>
      <p1 x="120" y="360"/>
      <p2 x="300" y="360"/>
    </wire>
    <wire>
      <p1 x="660" y="360"/>
      <p2 x="680" y="360"/>
    </wire>
    <wire>
      <p1 x="480" y="40"/>
      <p2 x="520" y="40"/>
    </wire>
    <wire>
      <p1 x="980" y="460"/>
      <p2 x="1020" y="460"/>
    </wire>
    <wire>
      <p1 x="1040" y="460"/>
      <p2 x="1140" y="460"/>
    </wire>
    <wire>
      <p1 x="940" y="460"/>
      <p2 x="960" y="460"/>
    </wire>
    <wire>
      <p1 x="500" y="300"/>
      <p2 x="600" y="300"/>
    </wire>
    <wire>
      <p1 x="100" y="300"/>
      <p2 x="140" y="300"/>
    </wire>
    <wire>
      <p1 x="280" y="300"/>
      <p2 x="420" y="300"/>
    </wire>
    <wire>
      <p1 x="600" y="300"/>
      <p2 x="680" y="300"/>
    </wire>
    <wire>
      <p1 x="480" y="-80"/>
      <p2 x="1140" y="-80"/>
    </wire>
    <wire>
      <p1 x="480" y="80"/>
      <p2 x="520" y="80"/>
    </wire>
    <wire>
      <p1 x="640" y="400"/>
      <p2 x="760" y="400"/>
    </wire>
    <wire>
      <p1 x="1000" y="240"/>
      <p2 x="1120" y="240"/>
    </wire>
    <wire>
      <p1 x="500" y="240"/>
      <p2 x="540" y="240"/>
    </wire>
    <wire>
      <p1 x="40" y="240"/>
      <p2 x="140" y="240"/>
    </wire>
    <wire>
      <p1 x="280" y="240"/>
      <p2 x="420" y="240"/>
    </wire>
    <wire>
      <p1 x="700" y="240"/>
      <p2 x="720" y="240"/>
    </wire>
    <wire>
      <p1 x="720" y="240"/>
      <p2 x="760" y="240"/>
    </wire>
    <wire>
      <p1 x="540" y="240"/>
      <p2 x="680" y="240"/>
    </wire>
    <wire>
      <p1 x="480" y="-20"/>
      <p2 x="520" y="-20"/>
    </wire>
    <wire>
      <p1 x="500" y="340"/>
      <p2 x="640" y="340"/>
    </wire>
    <wire>
      <p1 x="300" y="340"/>
      <p2 x="420" y="340"/>
    </wire>
    <wire>
      <p1 x="640" y="340"/>
      <p2 x="680" y="340"/>
    </wire>
    <wire>
      <p1 x="640" y="20"/>
      <p2 x="660" y="20"/>
    </wire>
    <wire>
      <p1 x="460" y="20"/>
      <p2 x="480" y="20"/>
    </wire>
    <wire>
      <p1 x="500" y="280"/>
      <p2 x="580" y="280"/>
    </wire>
    <wire>
      <p1 x="80" y="280"/>
      <p2 x="140" y="280"/>
    </wire>
    <wire>
      <p1 x="40" y="280"/>
      <p2 x="60" y="280"/>
    </wire>
    <wire>
      <p1 x="280" y="280"/>
      <p2 x="420" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="680" y="280"/>
    </wire>
    <wire>
      <p1 x="760" y="440"/>
      <p2 x="820" y="440"/>
    </wire>
    <wire>
      <p1 x="500" y="-60"/>
      <p2 x="1120" y="-60"/>
    </wire>
    <wire>
      <p1 x="-100" y="60"/>
      <p2 x="520" y="60"/>
    </wire>
    <wire>
      <p1 x="500" y="380"/>
      <p2 x="680" y="380"/>
    </wire>
    <wire>
      <p1 x="640" y="340"/>
      <p2 x="640" y="400"/>
    </wire>
    <wire>
      <p1 x="640" y="400"/>
      <p2 x="640" y="420"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="580" y="460"/>
    </wire>
    <wire>
      <p1 x="1160" y="160"/>
      <p2 x="1160" y="200"/>
    </wire>
    <wire>
      <p1 x="1040" y="440"/>
      <p2 x="1040" y="460"/>
    </wire>
    <wire>
      <p1 x="80" y="280"/>
      <p2 x="80" y="320"/>
    </wire>
    <wire>
      <p1 x="720" y="260"/>
      <p2 x="720" y="520"/>
    </wire>
    <wire>
      <p1 x="720" y="180"/>
      <p2 x="720" y="240"/>
    </wire>
    <wire>
      <p1 x="660" y="-100"/>
      <p2 x="660" y="20"/>
    </wire>
    <wire>
      <p1 x="660" y="360"/>
      <p2 x="660" y="460"/>
    </wire>
    <wire>
      <p1 x="600" y="300"/>
      <p2 x="600" y="420"/>
    </wire>
    <wire>
      <p1 x="540" y="240"/>
      <p2 x="540" y="460"/>
    </wire>
    <wire>
      <p1 x="1180" y="160"/>
      <p2 x="1180" y="520"/>
    </wire>
    <wire>
      <p1 x="1120" y="440"/>
      <p2 x="1120" y="480"/>
    </wire>
    <wire>
      <p1 x="1120" y="160"/>
      <p2 x="1120" y="240"/>
    </wire>
    <wire>
      <p1 x="1120" y="-100"/>
      <p2 x="1120" y="-60"/>
    </wire>
    <wire>
      <p1 x="1120" y="-60"/>
      <p2 x="1120" y="100"/>
    </wire>
    <wire>
      <p1 x="800" y="480"/>
      <p2 x="800" y="520"/>
    </wire>
    <wire>
      <p1 x="480" y="-80"/>
      <p2 x="480" y="-20"/>
    </wire>
    <wire>
      <p1 x="480" y="0"/>
      <p2 x="480" y="20"/>
    </wire>
    <wire>
      <p1 x="480" y="20"/>
      <p2 x="480" y="40"/>
    </wire>
    <wire>
      <p1 x="480" y="40"/>
      <p2 x="480" y="80"/>
    </wire>
    <wire>
      <p1 x="-100" y="60"/>
      <p2 x="-100" y="520"/>
    </wire>
    <wire>
      <p1 x="100" y="300"/>
      <p2 x="100" y="360"/>
    </wire>
    <wire>
      <p1 x="680" y="380"/>
      <p2 x="680" y="420"/>
    </wire>
    <wire>
      <p1 x="360" y="320"/>
      <p2 x="360" y="520"/>
    </wire>
    <wire>
      <p1 x="620" y="320"/>
      <p2 x="620" y="460"/>
    </wire>
    <wire>
      <p1 x="300" y="340"/>
      <p2 x="300" y="360"/>
    </wire>
    <wire>
      <p1 x="560" y="260"/>
      <p2 x="560" y="420"/>
    </wire>
    <wire>
      <p1 x="1140" y="160"/>
      <p2 x="1140" y="260"/>
    </wire>
    <wire>
      <p1 x="1140" y="440"/>
      <p2 x="1140" y="460"/>
    </wire>
    <wire>
      <p1 x="1140" y="-140"/>
      <p2 x="1140" y="-80"/>
    </wire>
    <wire>
      <p1 x="1140" y="-80"/>
      <p2 x="1140" y="100"/>
    </wire>
    <wire>
      <p1 x="1140" y="460"/>
      <p2 x="1140" y="500"/>
    </wire>
    <wire>
      <p1 x="500" y="-60"/>
      <p2 x="500" y="-40"/>
    </wire>
    <wire>
      <p1 x="120" y="-100"/>
      <p2 x="120" y="320"/>
    </wire>
    <wire>
      <p1 x="120" y="320"/>
      <p2 x="120" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="400"/>
      <p2 x="760" y="440"/>
    </wire>
    <wire>
      <p1 x="1020" y="440"/>
      <p2 x="1020" y="460"/>
    </wire>
    <wire>
      <p1 x="60" y="260"/>
      <p2 x="60" y="280"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>